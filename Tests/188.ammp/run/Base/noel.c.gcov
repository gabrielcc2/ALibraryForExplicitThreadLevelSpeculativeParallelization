        -:    0:Source:/home/gabriel/Escritorio/SPEC_CPU2000_CD_2/benchspec/CFP2000/188.ammp/src/noel.c
        -:    0:Graph:ammp_parallel.gcno
        -:    0:Data:ammp_parallel.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* noel.c
        -:    2:*
        -:    3:* collection of routines to service noel potentials
        -:    4:*
        -:    5:* noel  == NOE Length
        -:    6:*
        -:    7:*  stepped bonds
        -:    8:*  noel i j d d- d+ kl kh
        -:    9:*  v =  (r - ( d - d-) )**2 *kl r < d-
        -:   10:*  v =  (r - ( d + d+) )**2 *kh r > d+
        -:   11:*
        -:   12:*  kl,kh can be of any value 
        -:   13:*
        -:   14:* POOP (Poor-mans Object Oriented Programming) using scope rules
        -:   15:*
        -:   16:* these routines hold a data base (in terms of array indeces)
        -:   17:* of noelts, with the associated length and force constant
        -:   18:* These are updateable - unlike bonds which are "permanent"
        -:   19:*
        -:   20:* (this could be table driven but what the hell memories cheap)
        -:   21:*
        -:   22:* the routines for potential value, force and (eventually) second
        -:   23:* derivatives are here also
        -:   24:*
        -:   25:* force and 2nd derivative routines assume zero'd arrays for output
        -:   26:* this allows for parralellization if needed (on a PC?)
        -:   27:*
        -:   28:* forces are symmetric 
        -:   29:*
        -:   30:*
        -:   31:* 71895
        -:   32:* homotropy noel's
        -:   33:* keyed to lambda as in bonds
        -:   34:*  use honoel
        -:   35:*/
        -:   36:/*
        -:   37:*  copyright 1992,1994 Robert W. Harrison
        -:   38:*  
        -:   39:*  This notice may not be removed
        -:   40:*  This program may be copied for scientific use
        -:   41:*  It may not be sold for profit without explicit
        -:   42:*  permission of the author(s) who retain any
        -:   43:*  commercial rights including the right to modify 
        -:   44:*  this notice
        -:   45:*/
        -:   46:
        -:   47:#define ANSI 1
        -:   48:/* misc includes - ANSI and some are just to be safe */
        -:   49:#include <stdio.h>
        -:   50:#include <ctype.h>
        -:   51:#include <math.h>
        -:   52:#ifdef ANSI
        -:   53:#include <stdlib.h>
        -:   54:#endif
        -:   55://#include "ammp.h"
        -:   56:/* ATOM structure contains a serial number for indexing into
        -:   57:* arrays and the like (a Hessian)
        -:   58:* but otherwise is self-contained. Note the hooks for Non-bonded potentials
        -:   59:*/
        -:   60:typedef struct{
        -:   61:	ATOM *atom1,*atom2;
        -:   62:	float d,dm,dh,km,kh;
        -:   63:	void *next;
        -:   64:	}  NOEL;
        -:   65:#define NOELLONG sizeof(NOEL)
        -:   66:
        -:   67:NOEL *noel_first = NULL;
        -:   68:NOEL *noel_last = NULL;
        -:   69:/* function noel adds a noel to the noel list
        -:   70:* returns 1 if ok
        -:   71:* returns 0 if not
        -:   72:*  is passed the atom serial numbers, length and constant
        -:   73:* allocates the new memory, initializes it and
        -:   74:* returns
        -:   75:*/
function _Z4noeliifffff called 0 returned 0% blocks executed 0%
    #####:   76:int noel (int p1, int p2, float d, float dm, float dh,float km, float kh)
        -:   77:{
        -:   78:	ATOM *ap1,*ap2,*a_m_serial(int);
        -:   79:	NOEL *new_p;
        -:   80:	char line[80];
        -:   81:/* get the atom pointers for the two serial numbers */
    #####:   82:	ap1 = a_m_serial( p1 );
call    0 never executed
    #####:   83:	ap2 = a_m_serial( p2 );
call    0 never executed
    #####:   84:	if( (ap1 == NULL) || (ap2 == NULL) ) 
branch  0 never executed
branch  1 never executed
        -:   85:	{
        -:   86:	sprintf( line,"undefined atom in noel %d %d \0",p1,p2);
    #####:   87:	aaerror( line );
call    0 never executed
    #####:   88:	return 0;
        -:   89:	}
        -:   90:/* check to see if a noelt is already defined */
    #####:   91:	new_p = noel_first;
    #####:   92:	if( new_p != NULL)
branch  0 never executed
branch  1 never executed
        -:   93:	{
    #####:   94:	while(1)
        -:   95:	{
    #####:   96:		if( new_p == NULL) break;
branch  0 never executed
branch  1 never executed
    #####:   97:		if( (new_p->atom1 == ap1 && new_p->atom2 == ap2) ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:   98:                    (new_p->atom1 == ap2 && new_p->atom2 == ap1) )
        -:   99:		{
    #####:  100:		new_p->d = d; new_p->dm = dm; new_p->dh = dh;  
    #####:  101:		new_p->km = km; new_p->kh = kh; return 1;
        -:  102:		}
    #####:  103:		if( new_p == new_p->next) break;
branch  0 never executed
branch  1 never executed
    #####:  104:		new_p = (NOEL*) new_p->next;
        -:  105:	}
        -:  106:	}
    #####:  107:	if( ( new_p = (NOEL*) malloc( NOELLONG ) ) == NULL)
branch  0 never executed
branch  1 never executed
        -:  108:	{
    #####:  109:	return 0;
        -:  110:	}
        -:  111:	/* initialize the pointers */
    #####:  112:	if( noel_first == NULL) noel_first = new_p;
branch  0 never executed
branch  1 never executed
    #####:  113:	if( noel_last == NULL) noel_last = new_p;
branch  0 never executed
branch  1 never executed
    #####:  114:	new_p -> atom1 = ap1;
    #####:  115:	new_p -> atom2 = ap2;
    #####:  116:		new_p->d = d; new_p->dm = dm; new_p->dh = dh;  
    #####:  117:		new_p->km = km; new_p->kh = kh; 
    #####:  118:	new_p -> next = new_p;
    #####:  119:	noel_last -> next = new_p;
    #####:  120:	noel_last = new_p;
    #####:  121:	return 1;
        -:  122:	}
        -:  123:
        -:  124:
        -:  125:/* v_noel()
        -:  126:* this function sums up the potentials
        -:  127:* for the atoms defined in the NOEL data structure.
        -:  128:*/
        -:  129:/* standard returns 0 if error (any) 1 if ok
        -:  130:* V is the potential */
function _Z6v_noelPff called 0 returned 0% blocks executed 0%
    #####:  131:int v_noel(float *V, float lambda)
        -:  132:{
        -:  133:	NOEL *bp;
        -:  134:	float r,xt,yt,zt;
        -:  135:	ATOM *a1,*a2;
        -:  136:
        -:  137:
    #####:  138:	bp = noel_first;
    #####:  139:       if( bp == NULL ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  140:       while(1)
        -:  141:       {
    #####:  142:	if( bp == NULL) return 0;
branch  0 never executed
branch  1 never executed
    #####:  143:	a1 = bp->atom1; a2 = bp->atom2;
    #####:  144:	if( a1->active || a2->active ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  145:	if( lambda == 0.)
branch  0 never executed
branch  1 never executed
        -:  146:	{
    #####:  147:	r = (a1->x - a2->x)*(a1->x - a2->x);
    #####:  148:	r = r + (a1->y - a2->y)*(a1->y - a2->y);
    #####:  149:	r = r + (a1->z - a2->z)*(a1->z - a2->z);
        -:  150:	} else
        -:  151:	{
    #####:  152:	xt = (a1->x -a2->x +lambda*(a1->dx-a2->dx));
    #####:  153:	yt = (a1->y -a2->y +lambda*(a1->dy-a2->dy));
    #####:  154:	zt = (a1->z -a2->z +lambda*(a1->dz-a2->dz));
    #####:  155:	r = xt*xt+yt*yt+zt*zt;
        -:  156:	}
    #####:  157:	r = sqrt(r); 
    #####:  158:	if( r < bp->d -bp->dm)
branch  0 never executed
branch  1 never executed
        -:  159:	{
    #####:  160:	r = r - bp->d + bp->dm;
    #####:  161:	*V += bp->km * r*r;
    #####:  162:	} else if( r > bp->d+ bp->dh) {
branch  0 never executed
branch  1 never executed
    #####:  163:	r = r - bp->d - bp->dh;
    #####:  164:	*V += bp->kh * r*r;
        -:  165:	}
        -:  166:	}
    #####:  167:	if( bp == bp->next ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  168:	bp = (NOEL*) bp->next;
        -:  169:       }
        -:  170:}
        -:  171:/* f_noel()
        -:  172:*
        -:  173:* f_noel increments the forces in the atom structures by the force
        -:  174:* due to the noel components.  NOTE THE WORD increment.
        -:  175:* the forces should first be zero'd.
        -:  176:* if not then this code will be invalid.  THIS IS DELIBERATE.
        -:  177:* on bigger (and better?) machines the different potential terms
        -:  178:* may be updated at random or in parrellel, if we assume that this routine
        -:  179:* will initialize the forces then we can't do this.
        -:  180:*/
function _Z6f_noelf called 0 returned 0% blocks executed 0%
    #####:  181:int f_noel(float lambda)
        -:  182:/*  returns 0 if error, 1 if OK */
        -:  183:{
        -:  184:	NOEL *bp;
        -:  185:	float r,k,ux,uy,uz;
        -:  186:	ATOM *a1,*a2;
        -:  187:
        -:  188:
    #####:  189:	bp = noel_first;
    #####:  190:       if( bp == NULL ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  191:       while(1)
        -:  192:       {
    #####:  193:	if( bp == NULL) return 0;
branch  0 never executed
branch  1 never executed
    #####:  194:	a1 = bp->atom1; a2 = bp->atom2;
    #####:  195:	if( a1->active || a2->active){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  196:	if( lambda == 0.)
branch  0 never executed
branch  1 never executed
        -:  197:	{
    #####:  198:	ux = (a2->x - a1->x);
    #####:  199:	uy = (a2->y - a1->y);
    #####:  200:	uz = (a2->z - a1->z);
        -:  201:	}else{
    #####:  202:	ux = (a2->x -a1->x +lambda*(a2->dx-a1->dx));
    #####:  203:	uy = (a2->y -a1->y +lambda*(a2->dy-a1->dy));
    #####:  204:	uz = (a2->z -a1->z +lambda*(a2->dz-a1->dz));
        -:  205:	}
    #####:  206:	r = ux*ux + uy*uy + uz*uz;
        -:  207:	 /* watch for FP errors*/
    #####:  208:	 if( r <= 1.e-5)
branch  0 never executed
branch  1 never executed
    #####:  209:	 { r = 0; ux = 1.; uy = 0.; uz = 0.; }else{
    #####:  210:	r = sqrt(r); ux = ux/r; uy = uy/r; uz = uz/r;
        -:  211:	}
    #####:  212:	if( r < bp->d -bp->dm)
branch  0 never executed
branch  1 never executed
        -:  213:	{
    #####:  214:	r = r - bp->d + bp->dm;
    #####:  215:	ux = 2*bp->km * r *ux;
    #####:  216:	uy = 2*bp->km * r *uy;
    #####:  217:	uz = 2*bp->km * r *uz;
    #####:  218:	} else if( r > bp->d+ bp->dh) {
branch  0 never executed
branch  1 never executed
    #####:  219:	r = r - bp->d - bp->dh;
    #####:  220:	ux = 2*bp->kh * r *ux;
    #####:  221:	uy = 2*bp->kh * r *uy;
    #####:  222:	uz = 2*bp->kh * r *uz;
        -:  223:	}else{
    #####:  224:	ux = 0.; uy = 0.; uz = 0.;
        -:  225:	}
    #####:  226:	if( a1->active){
branch  0 never executed
branch  1 never executed
    #####:  227:	a1->fx += ux; 
    #####:  228:	a1->fy += uy; 
    #####:  229:	a1->fz += uz; 
        -:  230:	}
    #####:  231:	if( a2->active) {
branch  0 never executed
branch  1 never executed
    #####:  232:	a2->fx -= ux; 
    #####:  233:	a2->fy -= uy; 
    #####:  234:	a2->fz -= uz; 
        -:  235:	}
        -:  236:	}
    #####:  237:	if( bp == bp->next ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  238:	bp = (NOEL*) bp->next;
        -:  239:       }
        -:  240:}
        -:  241:/* function get_noel( a1,noeled,10,innoel);
        -:  242:* check the NOELS list for atoms noeled to a1
        -:  243:*/
function _Z8get_noelP4ATOMPS0_iPi called 0 returned 0% blocks executed 0%
    #####:  244:void get_noel(ATOM *a1, ATOM *noeled[], int mnoel, int *innoel)
        -:  245:{
        -:  246:	NOEL *mine;
    #####:  247:	mine = noel_first;
    #####:  248:	*innoel = 0;
        -:  249:	while(1)
        -:  250:	{
    #####:  251:	if( (mine == NULL) )
branch  0 never executed
branch  1 never executed
        -:  252:	{
        -:  253:		return;
        -:  254:	}
    #####:  255:	if( mine->atom1 == a1)
branch  0 never executed
branch  1 never executed
        -:  256:	{
    #####:  257:		noeled[(*innoel)++] = mine->atom2;
        -:  258:	}
    #####:  259:	if( mine->atom2 == a1)
branch  0 never executed
branch  1 never executed
        -:  260:	{
    #####:  261:		noeled[(*innoel)++] = mine->atom1;
        -:  262:	}
    #####:  263:	if( mine == mine->next) return;
branch  0 never executed
branch  1 never executed
    #####:  264:	mine = (NOEL*) mine->next;
    #####:  265:	if( *innoel == mnoel ) return;
branch  0 never executed
branch  1 never executed
        -:  266:	}		
        -:  267:}
        -:  268:/* routine dump_noels
        -:  269:* this function outputs the noel parameters
        -:  270:* and does it in a simple form
        -:  271:* noel ser1,ser2,k,req
        -:  272:* the rest is just free format
        -:  273:*/
        -:  274:/* SPEC use modern style declaration, to match proto jh/9/22/99 */
function _Z10dump_noelsP8_IO_FILE called 0 returned 0% blocks executed 0%
    #####:  275:void dump_noels( FILE *where )
        -:  276:{
        -:  277:	NOEL *b;
        -:  278:	ATOM *a1,*a2;
    #####:  279:	b = noel_first;
    #####:  280:	if( b == NULL ) return;
branch  0 never executed
branch  1 never executed
    #####:  281:	while( (b->next != b) )
branch  0 never executed
branch  1 never executed
        -:  282:	{
    #####:  283:	if( b->next == NULL) return;
branch  0 never executed
branch  1 never executed
    #####:  284:	a1 = b->atom1; a2 = b->atom2;
        -:  285:	fprintf( where,"noel %d %d %f %f %f %f %f;\n",a1->serial,a2->serial,
    #####:  286:		b->d, b->dm, b->dh, b->km, b->kh);
    #####:  287:	b = (NOEL*) b->next;
        -:  288:	}
    #####:  289:	if( b->next == NULL) return;
branch  0 never executed
branch  1 never executed
    #####:  290:	a1 = b->atom1; a2 = b->atom2;
        -:  291:	fprintf( where,"noel %d %d %f %f %f %f %f ;\n",a1->serial,a2->serial,
    #####:  292:		b->d, b->dm, b->dh, b->km, b->kh);
        -:  293:}	
        -:  294:
        -:  295:/* a_noel()
        -:  296:* this function sums up the potentials
        -:  297:* for the atoms defined in the NOEL data structure.
        -:  298:*/
        -:  299:/* standard returns 0 if error (any) 1 if ok
        -:  300:* V is the potential */
function _Z6a_noelPffiiP8_IO_FILE called 0 returned 0% blocks executed 0%
    #####:  301:int a_noel(float *V,float lambda, int ilow, int ihigh, 	FILE *op)
        -:  302:{
        -:  303:	NOEL *bp;
        -:  304:	float r,xt,yt,zt;
        -:  305:	ATOM *a1,*a2;
        -:  306:
        -:  307:
    #####:  308:	bp = noel_first;
    #####:  309:       if( bp == NULL ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  310:       while(1)
        -:  311:       {
    #####:  312:	if( bp == NULL) return 0;
branch  0 never executed
branch  1 never executed
    #####:  313:	a1 = bp->atom1; a2 = bp->atom2;
    #####:  314:	if(( a1->serial >= ilow && a1->serial <=ihigh)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  315:	 ||( a2->serial >= ilow && a2->serial <=ihigh))
        -:  316:	{
    #####:  317:	if( lambda == 0.)
branch  0 never executed
branch  1 never executed
        -:  318:	{
    #####:  319:	r = (a1->x - a2->x)*(a1->x - a2->x);
    #####:  320:	r = r + (a1->y - a2->y)*(a1->y - a2->y);
    #####:  321:	r = r + (a1->z - a2->z)*(a1->z - a2->z);
        -:  322:	} else
        -:  323:	{
    #####:  324:	xt = (a1->x -a2->x +lambda*(a1->dx-a2->dx));
    #####:  325:	yt = (a1->y -a2->y +lambda*(a1->dy-a2->dy));
    #####:  326:	zt = (a1->z -a2->z +lambda*(a1->dz-a2->dz));
    #####:  327:	r = xt*xt+yt*yt+zt*zt;
        -:  328:	}
    #####:  329:	r = sqrt(r); 
    #####:  330:	zt = 0;
    #####:  331:	if( r < bp->d -bp->dm)
branch  0 never executed
branch  1 never executed
    #####:  332:	zt= bp->km*( r - bp->d+ bp->dm)*(r - bp->d+ bp->dm);
    #####:  333:	if( r > bp->d +bp->dh)
branch  0 never executed
branch  1 never executed
    #####:  334:	zt= bp->kh*( r - bp->d- bp->dh)*(r - bp->d- bp->dh);
    #####:  335:	*V += zt;
        -:  336:	fprintf(op,"NOEl %s %d %s %d E %f value %f error %f\n"
    #####:  337:	,a1->name,a1->serial,a2->name,a2->serial,zt,r,r-bp->d);
        -:  338:	}
    #####:  339:	if( bp == bp->next ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  340:	bp = (NOEL*) bp->next;
        -:  341:       }
        -:  342:}
        -:  343:/* gsdg_noel( ATOM *ap )
        -:  344:*  
        -:  345:* setup the distances for NOEL terms
        -:  346:*/
function _Z9gsdg_noelP4ATOM called 0 returned 0% blocks executed 0%
    #####:  347:int gsdg_noel(ATOM *ap)
        -:  348:{
        -:  349:	ATOM *bp;
        -:  350:	NOEL *np;
        -:  351:
    #####:  352:	np = noel_first;
    #####:  353:	while(1)
        -:  354:        /* SPEC - add a "1" here to remove warnings, but I don't think */
        -:  355:        /*        any callers actually look at this return value       */
        -:  356:        /*        - j.henning 21-sep-99                                */
    #####:  357:	{ if( np == NULL ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  358:	if( np->atom1 == ap )
branch  0 never executed
branch  1 never executed
    #####:  359:	{  bp = np->atom2; bp->vx = (np->d*np->d);
    #####:  360:	   bp->vy = np->km; }
    #####:  361:	if( np->atom2 == ap )
branch  0 never executed
branch  1 never executed
    #####:  362:	{  bp = np->atom1; bp->vx = (np->d*np->d );
    #####:  363:	   bp->vy = np->km; }
        -:  364:
        -:  365:        /* SPEC - add a "1" here to remove warnings, but I don't think */
        -:  366:        /*        any callers actually look at this return value       */
        -:  367:        /*        - j.henning 21-sep-99                                */
    #####:  368:	if( np == np->next ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  369:	np = (NOEL*) np->next;
        -:  370:	}
        -:  371:	return 0;
        -:  372:}
        -:  373:/* v_ho_noel()
        -:  374:* this function sums up the potentials
        -:  375:* for the atoms defined in the NOEL data structure.
        -:  376:*/
        -:  377:/* standard returns 0 if error (any) 1 if ok
        -:  378:* V is the potential */
function _Z9v_ho_noelPff called 0 returned 0% blocks executed 0%
    #####:  379:int v_ho_noel(float *V, float lambda)
        -:  380:{
        -:  381:	NOEL *bp;
        -:  382:	float r,xt,yt,zt;
        -:  383:	ATOM *a1,*a2;
        -:  384:	float hol,get_f_variable(char*),target;
        -:  385:
    #####:  386:	hol = get_f_variable("lambda");
call    0 never executed
    #####:  387:	if( hol > 1.) hol = 1.;
branch  0 never executed
branch  1 never executed
    #####:  388:	if( hol < 0.) hol = 0.;
branch  0 never executed
branch  1 never executed
        -:  389:
    #####:  390:	bp = noel_first;
    #####:  391:       if( bp == NULL ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  392:       while(1)
        -:  393:       {
    #####:  394:	if( bp == NULL) return 0;
branch  0 never executed
branch  1 never executed
    #####:  395:	a1 = bp->atom1; a2 = bp->atom2;
    #####:  396:	if( a1->active || a2->active ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  397:	if( lambda == 0.)
branch  0 never executed
branch  1 never executed
        -:  398:	{
    #####:  399:	r = (a1->x - a2->x)*(a1->x - a2->x);
    #####:  400:	r = r + (a1->y - a2->y)*(a1->y - a2->y);
    #####:  401:	r = r + (a1->z - a2->z)*(a1->z - a2->z);
        -:  402:	} else
        -:  403:	{
    #####:  404:	xt = (a1->x -a2->x +lambda*(a1->dx-a2->dx));
    #####:  405:	yt = (a1->y -a2->y +lambda*(a1->dy-a2->dy));
    #####:  406:	zt = (a1->z -a2->z +lambda*(a1->dz-a2->dz));
    #####:  407:	r = xt*xt+yt*yt+zt*zt;
        -:  408:	}
    #####:  409:	r = sqrt(r); 
    #####:  410:	if( r < bp->d -bp->dm)
branch  0 never executed
branch  1 never executed
        -:  411:	{
    #####:  412:	target = hol*r + (1.-hol)*(bp->d-bp->dm);
    #####:  413:	r = r - target;
    #####:  414:	*V += bp->km * r*r;
    #####:  415:	} else if( r > bp->d+ bp->dh) {
branch  0 never executed
branch  1 never executed
    #####:  416:	target = hol*r + (1.-hol)*(bp->d+bp->dh);
    #####:  417:	r = r - target;
    #####:  418:	*V += bp->kh * r*r;
        -:  419:	}
        -:  420:	}
    #####:  421:	if( bp == bp->next ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  422:	bp = (NOEL*) bp->next;
        -:  423:       }
        -:  424:}
        -:  425:/* f_ho_noel()
        -:  426:*
        -:  427:* f_ho_noel increments the forces in the atom structures by the force
        -:  428:* due to the noel components.  NOTE THE WORD increment.
        -:  429:* the forces should first be zero'd.
        -:  430:* if not then this code will be invalid.  THIS IS DELIBERATE.
        -:  431:* on bigger (and better?) machines the different potential terms
        -:  432:* may be updated at random or in parrellel, if we assume that this routine
        -:  433:* will initialize the forces then we can't do this.
        -:  434:*/
function _Z9f_ho_noelf called 0 returned 0% blocks executed 0%
    #####:  435:int f_ho_noel(float lambda)
        -:  436:/*  returns 0 if error, 1 if OK */
        -:  437:{
        -:  438:	NOEL *bp;
        -:  439:	float r,k,ux,uy,uz;
        -:  440:	ATOM *a1,*a2;
        -:  441:	float hol,get_f_variable(char*),target;
        -:  442:
    #####:  443:	hol = get_f_variable("lambda");
call    0 never executed
    #####:  444:	if( hol > 1.) hol = 1.;
branch  0 never executed
branch  1 never executed
    #####:  445:	if( hol < 0.) hol = 0.;
branch  0 never executed
branch  1 never executed
        -:  446:
        -:  447:
    #####:  448:	bp = noel_first;
    #####:  449:       if( bp == NULL ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  450:       while(1)
        -:  451:       {
    #####:  452:	if( bp == NULL) return 0;
branch  0 never executed
branch  1 never executed
    #####:  453:	a1 = bp->atom1; a2 = bp->atom2;
    #####:  454:	if( a1->active || a2->active){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  455:	if( lambda == 0.)
branch  0 never executed
branch  1 never executed
        -:  456:	{
    #####:  457:	ux = (a2->x - a1->x);
    #####:  458:	uy = (a2->y - a1->y);
    #####:  459:	uz = (a2->z - a1->z);
        -:  460:	}else{
    #####:  461:	ux = (a2->x -a1->x +lambda*(a2->dx-a1->dx));
    #####:  462:	uy = (a2->y -a1->y +lambda*(a2->dy-a1->dy));
    #####:  463:	uz = (a2->z -a1->z +lambda*(a2->dz-a1->dz));
        -:  464:	}
    #####:  465:	r = ux*ux + uy*uy + uz*uz;
        -:  466:	 /* watch for FP errors*/
    #####:  467:	 if( r <= 1.e-5)
branch  0 never executed
branch  1 never executed
    #####:  468:	 { r = 0; ux = 1.; uy = 0.; uz = 0.; }else{
    #####:  469:	r = sqrt(r); ux = ux/r; uy = uy/r; uz = uz/r;
        -:  470:	}
    #####:  471:	if( r < bp->d -bp->dm)
branch  0 never executed
branch  1 never executed
        -:  472:	{
    #####:  473:	target = hol*r + (1.-hol)*(bp->d-bp->dm);
    #####:  474:	r = r - target;
    #####:  475:	ux = 2*bp->km * r*(1.-hol) *ux;
    #####:  476:	uy = 2*bp->km * r*(1.-hol) *uy;
    #####:  477:	uz = 2*bp->km * r*(1.-hol) *uz;
    #####:  478:	} else if( r > bp->d+ bp->dh) {
branch  0 never executed
branch  1 never executed
    #####:  479:	target = hol*r + (1.-hol)*(bp->d+bp->dh);
    #####:  480:	r = r - target;
    #####:  481:	ux = 2*bp->kh * r*(1.-hol) *ux;
    #####:  482:	uy = 2*bp->kh * r*(1.-hol) *uy;
    #####:  483:	uz = 2*bp->kh * r*(1.-hol) *uz;
        -:  484:	}else{
    #####:  485:	ux = 0.; uy = 0.; uz = 0.;
        -:  486:	}
    #####:  487:	if( a1->active){
branch  0 never executed
branch  1 never executed
    #####:  488:	a1->fx += ux; 
    #####:  489:	a1->fy += uy; 
    #####:  490:	a1->fz += uz; 
        -:  491:	}
    #####:  492:	if( a2->active) {
branch  0 never executed
branch  1 never executed
    #####:  493:	a2->fx -= ux; 
    #####:  494:	a2->fy -= uy; 
    #####:  495:	a2->fz -= uz; 
        -:  496:	}
        -:  497:	}
    #####:  498:	if( bp == bp->next ) return 1;
branch  0 never executed
branch  1 never executed
    #####:  499:	bp = (NOEL*) bp->next;
        -:  500:       }
        -:  501:}
