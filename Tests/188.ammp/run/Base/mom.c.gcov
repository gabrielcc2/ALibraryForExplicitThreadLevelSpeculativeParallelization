        -:    0:Source:/home/gabriel/Escritorio/SPEC_CPU2000_CD_2/benchspec/CFP2000/188.ammp/src/mom.c
        -:    0:Graph:ammp_parallel.gcno
        -:    0:Data:ammp_parallel.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* mom.c
        -:    2:*
        -:    3:* evaluate charges by the method of moments
        -:    4:*
        -:    5:* largely cadged from Rappe and Goddard JPC 95 3358-3363
        -:    6:* cleaned up the solver 
        -:    7:*
        -:    8:* modifies the atom structure to have a jaa and chi field
        -:    9:*  (self colomb energy and electronegativity )
        -:   10:*/
        -:   11:/*
        -:   12:*  copyright 1993 Robert W. Harrison
        -:   13:*  
        -:   14:*  This notice may not be removed
        -:   15:*  This program may be copied for scientific use
        -:   16:*  It may not be sold for profit without explicit
        -:   17:*  permission of the author(s) who retain any
        -:   18:*  commercial rights including the right to modify 
        -:   19:*  this notice
        -:   20:*/
        -:   21:
        -:   22:#define ANSI 1
        -:   23:/* misc includes - ANSI and some are just to be safe */
        -:   24:#include <stdio.h>
        -:   25:#include <ctype.h>
        -:   26:#include <math.h>
        -:   27:#ifdef ANSI
        -:   28:#include <stdlib.h>
        -:   29:#endif
        -:   30://#include "ammp.h"
        -:   31:/* ATOM structure contains a serial number for indexing into
        -:   32:* arrays and the like (a Hessian)
        -:   33:* but otherwise is self-contained. Note the hooks for Non-torsioned potentials
        -:   34:*/
        -:   35:#define MAXMOM 100
        -:   36:ATOM *mom_list[MAXMOM];
        -:   37:int in_mom_list = 0;
        -:   38:
        -:   39:/*  this is a routine to solve a linear equation by
        -:   40:    guassian elimination.  (basically solve.for translated) */
        -:   41:/* in order to have the  array matrix be of any length it must be passed as
        -:   42:   a linear array.  Since C has the opposite convention for array packing from 
        -:   43:   FORTRAN ( row fastest rather than column fastest) the leading dimension
        -:   44:   ilead is the row size of the array to which matrix points */
function _Z9mom_solvev called 0 returned 0% blocks executed 0%
    #####:   45:	int mom_solve( )
        -:   46://float (*matrix)[], float (*vector)[], int irow, int ilead 
        -:   47:	{
        -:   48:/*	 float quotient;
        -:   49:	int i,j,k;
        -:   50:	int  mpi,mpj,mpk;
        -:   51:	mpi = 0;
        -:   52:	for ( i=0 ; i < irow - 1 ; i++ )
        -:   53:	{  /* for each row */
        -:   54:/*	j = i ;
        -:   55:	mpj = mpi;
        -:   56:	while ( (*matrix) [mpi + i] == 0)
        -:   57:		{
        -:   58:		if( j == irow )
        -:   59:			{ return (-1); }
        -:   60:		j ++;
        -:   61:		mpj += ilead;
        -:   62:		(*vector)[i] +=  (*vector)[j];
        -:   63:		for (k = i; k <irow  ; k++)
        -:   64:			{(*matrix)[mpi + k] += (*matrix)[mpj +k]; }
        -:   65:		}
        -:   66:/* if here then the diagonal element is not zero so we can do the division*/
        -:   67:/*	mpj = mpi +ilead ;
        -:   68:	for ( j= i+1; j < irow ; j++ )
        -:   69:	{
        -:   70:	if( (*matrix)[mpj + i] != 0 )
        -:   71:		{
        -:   72:		 quotient = (*matrix)[mpj + i]/(*matrix)[mpi + i];
        -:   73:		 (*vector)[j] -= (*vector)[i]*quotient;
        -:   74:		for ( k=i ; k< irow ; k++ )
        -:   75:		{ (*matrix)[mpj + k] -= (*matrix)[mpi + k]*quotient; }
        -:   76:		}  /* if */
        -:   77:/*	mpj += ilead;
        -:   78:	} /* for j */
        -:   79:/*	mpi += ilead;
        -:   80:	} /* for i */
        -:   81:
        -:   82:/* now start the back substitution loop */
        -:   83:/*	mpi = 0;
        -:   84:	for ( i = 0; i < irow - 1 ; i++ )
        -:   85:	{
        -:   86:		k = irow - i - 1;
        -:   87:		mpj= 0;
        -:   88:		mpk =  k*ilead;
        -:   89:	for ( j = 0; j < k ; j++)
        -:   90:	{ (*vector)[j] -=(*matrix)[mpj+k]/(*matrix)[mpk+k]*(*vector)[k];
        -:   91:		mpj +=ilead; }
        -:   92:	} /* i */
        -:   93:
        -:   94:/* and finally divide by the diagonal elements */
        -:   95:/*	mpi = 0;
        -:   96:	for ( i=0; i <irow ; i++ )
        -:   97:	{ (*vector)[i] /= (*matrix)[mpi + i];
        -:   98:	mpi += ilead;    }*/
    #####:   99:	return (0);
        -:  100:	}
        -:  101:
        -:  102:
function _Z3momP8_IO_FILEfi called 0 returned 0% blocks executed 0%
    #####:  103:void mom(FILE *op, float tq, int niter)
        -:  104:{
        -:  105:float (*v)[], (*Z)[],(*Zk)[];
        -:  106:float r,dx,dy,dz;
        -:  107:float dv,tv;
        -:  108:int i,j,row;
        -:  109:float mom_jab(float, float, float);
        -:  110:
    #####:  111:	if( in_mom_list == 0 ) return;
branch  0 never executed
branch  1 never executed
    #####:  112:	if( niter <= 0 ) niter = 20; /* default number of trials */
branch  0 never executed
branch  1 never executed
    #####:  113:	v = (float (*)[]) malloc( in_mom_list * sizeof(float)) ;
    #####:  114:	Z = (float (*)[])malloc( in_mom_list*in_mom_list * sizeof(float)) ;
    #####:  115:	Zk = (float (*)[]) malloc( in_mom_list*in_mom_list * sizeof(float)) ;
    #####:  116:	if( v == NULL || Z == NULL|| Zk == NULL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  117:	{ aaerror(" cannot allocate memory in mom\n"); return;}
call    0 never executed
    #####:  118:	row = in_mom_list; /* this is just to save typing */
        -:  119:/* build the impedance matrix in Zk */
    #####:  120:	for( i=0; i< row; i++)
branch  0 never executed
branch  1 never executed
    #####:  121:	for( j=i+1; j< row; j++)
branch  0 never executed
branch  1 never executed
        -:  122:	{
    #####:  123:	dx = mom_list[j]->x - mom_list[i]->x;
    #####:  124:	dy = mom_list[j]->y - mom_list[i]->y;
    #####:  125:	dz = mom_list[j]->z - mom_list[i]->z;
    #####:  126:	r = sqrt(dx*dx + dy*dy + dz*dz);
    #####:  127:	(*Zk)[i + j*row] = mom_jab(r,mom_list[i]->jaa,mom_list[j]->jaa);
call    0 never executed
    #####:  128:	(*Zk)[j + i*row] = (*Zk)[i + j*row];
        -:  129:	}
    #####:  130:	for( i=0; i< row; i++)
branch  0 never executed
branch  1 never executed
    #####:  131:	{ (*Zk)[i+i*row] = mom_list[i]->jaa/2 ; }
        -:  132:/* now we're ready to do it */
        -:  133:
    #####:  134:	dv = 0; /* the offset charge */
        -:  135:
    #####:  136:	for( j=0; j< niter; j++)
branch  0 never executed
branch  1 never executed
        -:  137:	{
    #####:  138:	for( i=0;i< row*row ; i++)
branch  0 never executed
branch  1 never executed
    #####:  139:	(*Z)[i] = (*Zk)[i] ;
        -:  140:
        -:  141:
    #####:  142:	for( i=0; i< row; i++)
branch  0 never executed
branch  1 never executed
    #####:  143:	{ (*v)[i]  =  -mom_list[i]->chi; }
        -:  144:
    #####:  145:	tv = 0.;
    #####:  146:	for( i=0; i< row; i++)
branch  0 never executed
branch  1 never executed
    #####:  147:	{ tv += (*v)[i]; }
    #####:  148:	tv = tv/row +dv;
    #####:  149:	for( i=0; i< row; i++)
branch  0 never executed
branch  1 never executed
    #####:  150:	 (*v)[i] -= tv; 
        -:  151:
        -:  152://	mom_solve( Z,v,row,row);
        -:  153:
    #####:  154:	tv = 0.;
    #####:  155:	for( i=0; i< row; i++)
branch  0 never executed
branch  1 never executed
        -:  156:	{
    #####:  157:	tv += (*v)[i];
        -:  158:	}
        -:  159:
        -:  160:
        -:  161:	
        -:  162:/*	dv += 2*(tv - tq); /*
        -:  163:/*	dv += 14.4*(tv - tq)/row*1.5;
        -:  164:*/
    #####:  165:	dv += 14.4*(tv - tq)/row*.25;
    #####:  166:	fprintf( op,"MoM iter %d error %e\n",j,tv-tq);
        -:  167:
        -:  168:	}/* end of j for */
        -:  169:
    #####:  170:	for( i=0; i< row; i++)
branch  0 never executed
branch  1 never executed
        -:  171:	{
    #####:  172:	mom_list[i]->q = (*v)[i];
        -:  173:	}
        -:  174:/* cleanup */
    #####:  175:	free(Zk) ;free( Z); free(v); in_mom_list = 0;
        -:  176:} 
        -:  177:
function _Z7mom_addii called 0 returned 0% blocks executed 0%
    #####:  178:void mom_add(int s1, int s2)
        -:  179:{
        -:  180:int i,j;
        -:  181:ATOM *ap,*a_m_serial(int),*a_next(int);
        -:  182:int a_number(),numatm;
    #####:  183:	numatm = a_number();
call    0 never executed
    #####:  184:	if( numatm == 0 ) return ;
branch  0 never executed
branch  1 never executed
    #####:  185:	if( s2 > 0 && s1 > s2)
branch  0 never executed
branch  1 never executed
    #####:  186:	{  i = s1; s1 = s2; s2 = i; } 
    #####:  187:	if( s2 > s1)
branch  0 never executed
branch  1 never executed
        -:  188:	{
    #####:  189:	for( i=0; i< numatm; i++)
branch  0 never executed
branch  1 never executed
        -:  190:	{
    #####:  191:	ap = a_next(i);
call    0 never executed
    #####:  192:	if(  ap->serial >=s1 && ap->serial <= s2 )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  193:	{
    #####:  194:	if( ap->chi > 0. && ap->jaa > 0.) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  195:	{
    #####:  196:	for( j=0; j< in_mom_list; j++)
branch  0 never executed
branch  1 never executed
    #####:  197:	{ if( mom_list[j] == ap) goto THERE_NOW; }
branch  0 never executed
branch  1 never executed
    #####:  198:	mom_list[in_mom_list++ ] = ap;
        -:  199:THERE_NOW:
    #####:  200:	if( in_mom_list == MAXMOM) in_mom_list --;	
branch  0 never executed
branch  1 never executed
        -:  201:	}
        -:  202:	}
        -:  203:	}
        -:  204:	return;
        -:  205:	}
    #####:  206:	if( (ap = a_m_serial(s1)) != NULL)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  207:	{
    #####:  208:	if( ap->chi > 0. && ap->jaa > 0.) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  209:	{
    #####:  210:	for( j=0; j< in_mom_list; j++)
branch  0 never executed
branch  1 never executed
    #####:  211:	{if( ap == mom_list[j]) goto THERE_AGAIN;}
branch  0 never executed
branch  1 never executed
    #####:  212:	mom_list[in_mom_list++ ] = ap;
        -:  213:THERE_AGAIN:
    #####:  214:	if( in_mom_list == MAXMOM) in_mom_list --;	
branch  0 never executed
branch  1 never executed
        -:  215:	}
        -:  216:	}
        -:  217:}
        -:  218:
        -:  219:/* SPEC use modern style declaration, to match proto jh/9/22/99 */
function _Z9mom_paramiff called 14400 returned 100% blocks executed 80%
    14400:  220:void mom_param( int serial, float chi, float jaa )
        -:  221:{
        -:  222:ATOM *ap,*a_m_serial(int);
        -:  223:
    14400:  224:	if( (ap = a_m_serial(serial)) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  225:	{ aaerror(" MOM> cannot modify non-extant atom "); return;}
call    0 never executed
    14400:  226:	ap->chi = chi;
    14400:  227:	ap->jaa = jaa;
        -:  228:}
        -:  229:
function _Z7mom_jabfff called 0 returned 0% blocks executed 0%
    #####:  230:float mom_jab(float r, float j1, float j2 )
        -:  231:{
        -:  232:float a,b,b2,b3;
        -:  233:/* fit by guess to the repulsion curve 
        -:  234:*  tested on methane 
        -:  235:*/
        -:  236:/*	if( r < 4.) return 9/(1+ .09375*r*r);
        -:  237:*/
        -:  238:/*
        -:  239:	if( r < 4.) return 8.5/(1+ .085069444*r*r)/2;
        -:  240:*/
    #####:  241:	if( r < 30.) {
branch  0 never executed
branch  1 never executed
        -:  242:		/* taken from wallace h,h interaction with a small fudge */
        -:  243:		/* the energy of h(1s) h(1s) is given, and we scale it 
        -:  244:		   by a term depending on atom type */
        -:  245:/*		a = (j1+j2)/4.;
        -:  246:*/
    #####:  247:		a = sqrt(j1*j2)/2.;
        -:  248:/*		r = 1.08*r;
        -:  249:*/
        -:  250:		/* effective radius is adjusted here  (1. is ok this is a little better) */
    #####:  251:		r = 1.1*r;
    #####:  252:		b = exp( -r );
        -:  253:/*		b2 = 1. +  (33*r + 9*r*r + r*r*r)/48.;
        -:  254:*/
        -:  255:/*		b2 = 1. +  (20*r - 9*r*r - r*r*r)/48.;
        -:  256:*/
    #####:  257:		b2 = 1. +  (15*r - 9*r*r - r*r*r)/48.;
    #####:  258:		return a/r*(b*b2);
        -:  259:
        -:  260:		}
        -:  261:
    #####:  262:	return 14.4/r/2;
        -:  263:}
        -:  264:
