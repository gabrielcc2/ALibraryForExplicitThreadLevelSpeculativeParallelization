        -:    0:Source:/home/gabriel/Escritorio/SPEC_CPU2000_CD_2/benchspec/CFP2000/188.ammp/src/box.c
        -:    0:Graph:ammp_parallel.gcno
        -:    0:Data:ammp_parallel.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*  generate a reflecting sphere
        -:    2:*
        -:    3:*  if the atom is beyond a specified radius
        -:    4:*  AND the radial component of the velocity is
        -:    5:* positive THEN invert the radial component.
        -:    6:*  also make sure the modulus of the velocity is not
        -:    7:* changed
        -:    8:*
        -:    9:*  this acts like a perfect reflecting sphere
        -:   10:*  (of Neutronium??)  and enforces average transfer
        -:   11:*  balance thereby inhibiting evaporation
        -:   12:*
        -:   13:*  sort of a poor man's substitute for 
        -:   14:* periodic boundary conditions
        -:   15:*  but maybe actually better.
        -:   16:*/
        -:   17:/* will depend on a variable
        -:   18:*  bbox which must be set
        -:   19:*  it will do nothing if this is not
        -:   20:*  defined
        -:   21:*/
        -:   22:/*
        -:   23:*  copyright 1998 Robert W. Harrison
        -:   24:*  
        -:   25:*  This notice may not be removed
        -:   26:*  This program may be copied for scientific use
        -:   27:*  It may not be sold for profit without explicit
        -:   28:*  permission of the author(s) who retain any
        -:   29:*  commercial rights including the right to modify 
        -:   30:*  this notice
        -:   31:*/
        -:   32:
        -:   33:#define ANSI 1
        -:   34:/* misc includes - ANSI and some are just to be safe */
        -:   35:#include <stdio.h>
        -:   36:#include <ctype.h>
        -:   37:#include <math.h>
        -:   38:#ifdef ANSI
        -:   39:#include <stdlib.h>
        -:   40:#endif
        -:   41://#include "ammp.h"
        -:   42:
        -:   43:/* v_box is a NULL function */
function _Z5v_boxPff called 3 returned 100% blocks executed 100%
        3:   44:int v_box(float *V, float lambda)
        -:   45:{
        3:   46:return 0;
        -:   47: }
        -:   48:
        -:   49:
function _Z5f_boxf called 1002 returned 100% blocks executed 90%
     1002:   50:int f_box(float lambda)
        -:   51:{
        -:   52:/* lambda is ignored and the dx == vx in pac et al are
        -:   53:* also updated */
        -:   54:	float bbox,get_f_variable(char*);
        -:   55:	float xc,yc,zc;
        -:   56:	float rx,ry,rz;
        -:   57:	float rad, vmod,vf,vdot;
        -:   58:	ATOM *ap,*a_next(int);
        -:   59:	int natom,a_number();
        -:   60:	int i;
        -:   61:
        -:   62:/* check for silly calls */
     1002:   63:	natom = a_number();
call    0 returned 100%
     1002:   64:	if( natom < 1) return 0;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1002:   65:	bbox = get_f_variable("bbox");
call    0 returned 100%
     1002:   66:	if( bbox < 1.) return 0;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   67:/* now find the center */
        -:   68:
     1002:   69:	xc = 0.; yc = 0.; zc = 0.;
  9602166:   70:	for( i=0;  i< natom; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   71:	{
  9601164:   72:	ap =  a_next(i);
call    0 returned 100%
  9601164:   73:	xc += ap->x ;
  9601164:   74:	yc += ap->y ;
  9601164:   75:	zc += ap->z ;
        -:   76:	}
     1002:   77:	xc  /= natom;
     1002:   78:	yc  /= natom;
     1002:   79:	zc  /= natom;
        -:   80:/* and now check for inverting the velocities */
        -:   81:
     1002:   82:	bbox = bbox*bbox;
  9602166:   83:	for( i=0; i< natom; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   84:	{
  9601164:   85:	ap = a_next(i);
call    0 returned 100%
  9601164:   86:	rx = ap->x -xc ;
  9601164:   87:	ry = ap->y -yc ;
  9601164:   88:	rz = ap->z -zc ;
  9601164:   89:	rad = rx*rx + ry*ry + rz*rz;
  9601164:   90:	if( rad > bbox )
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:   91:	{
   172031:   92:	rad = 1./sqrt(rad);
   172031:   93:	rx *= rad;
   172031:   94:	ry *= rad;
   172031:   95:	rz *= rad;
   172031:   96:	vmod = ap->vx*ap->vx + ap->vy*ap->vy + ap->vz*ap->vz;
   172031:   97:	vdot = ap->vx*rx + ap->vy*ry + ap->vz*rz;
   172031:   98:	if( vdot > 0. ){
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     8100:   99:		ap->vx -= vdot*rx;
     8100:  100:		ap->vx -= vdot*rx;
     8100:  101:		ap->vy -= vdot*ry;
     8100:  102:		ap->vy -= vdot*ry;
     8100:  103:		ap->vz -= vdot*rz;
     8100:  104:		ap->vz -= vdot*rz;
     8100:  105:		vf = ap->vx*ap->vx + ap->vy*ap->vy + ap->vz*ap->vz;
     8100:  106:		if( vf > 0.) vmod = sqrt(vmod/vf);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  107:	
     8100:  108:		ap->vx *= vmod;
     8100:  109:		ap->vy *= vmod;
     8100:  110:		ap->vz *= vmod;
     8100:  111:		ap->dx = ap->vx;
     8100:  112:		ap->dy = ap->vy;
     8100:  113:		ap->dz = ap->vz;
        -:  114:		
        -:  115:	} /* if vdot > 0. */
        -:  116:		
        -:  117:	}/* if rad > bbox */
        -:  118:	}/* for( i */
        -:  119:	
     1002:  120:	return 0;
        -:  121:}/* endof f_box */
