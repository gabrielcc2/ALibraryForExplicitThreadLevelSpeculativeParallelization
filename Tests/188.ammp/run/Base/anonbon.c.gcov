        -:    0:Source:/home/gabriel/Escritorio/SPEC_CPU2000_CD_2/benchspec/CFP2000/188.ammp/src/anonbon.c
        -:    0:Graph:ammp_parallel.gcno
        -:    0:Data:ammp_parallel.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* nonbon.c
        -:    2:*
        -:    3:* collection of routines to service nonbonded potentials
        -:    4:*
        -:    5:* POOP (Poor-mans Object Oriented Programming) using scope rules
        -:    6:*
        -:    7:* the routines for potential value, force and (eventually) second
        -:    8:* derivatives are here also
        -:    9:*
        -:   10:* force and 2nd derivative routines assume zero'd arrays for output
        -:   11:* this allows for parralellization if needed (on a PC?)
        -:   12:*
        -:   13:* forces are symmetric - so we don't have to mess around with
        -:   14:* s matrices and the like.
        -:   15:*
        -:   16:* note that the non-bonded information is in the ATOM structures 
        -:   17:*
        -:   18:*/
        -:   19:/*
        -:   20:*  copyright 1992 Robert W. Harrison
        -:   21:*  
        -:   22:*  This notice may not be removed
        -:   23:*  This program may be copied for scientific use
        -:   24:*  It may not be sold for profit without explicit
        -:   25:*  permission of the author(s) who retain any
        -:   26:*  commercial rights including the right to modify 
        -:   27:*  this notice
        -:   28:*/
        -:   29:
        -:   30:#define ANSI 1
        -:   31:/* misc includes - ANSI and some are just to be safe */
        -:   32:#include <stdio.h>
        -:   33:#include <ctype.h>
        -:   34:#include <math.h>
        -:   35:#ifdef ANSI
        -:   36:#include <stdlib.h>
        -:   37:#endif
        -:   38://#include "ammp.h"
        -:   39:/* ATOM structure contains a serial number for indexing into
        -:   40:* arrays and the like (a Hessian)
        -:   41:* but otherwise is self-contained. Note the hooks for Non-nonboned potentials
        -:   42:*/
        -:   43:
        -:   44:/* a_nonbon()
        -:   45:* this function sums up the potentials
        -:   46:* for the atoms defined in the nonbon data structure.
        -:   47:*/
        -:   48:/* standard returns 0 if error (any) 1 if ok
        -:   49:* V is the potential */
function _Z8a_nonbonPffiiP8_IO_FILE called 0 returned 0% blocks executed 0%
    #####:   50:int a_nonbon(float *V, float lambda, int ilow, int ihigh, FILE *op)
        -:   51:{
        -:   52:	float r,r0,xt,yt,zt;
        -:   53:	float lcutoff,cutoff,get_f_variable(char*);
        -:   54:	int inbond,inangle,i,ii;
        -:   55:	ATOM *a1,*a2;
        -:   56:	ATOM *a_next(int); /* returns first ATOM when called with -1 */
        -:   57:	float dielectric,ve,va,vh;
        -:   58:	float vel,val,vhl;
        -:   59:	float vtint,vtout, vtt;
        -:   60:	ATOM *a_m_serial(int);
        -:   61:
        -:   62:/* nonbonded potentials 
        -:   63:* do a double loop starting from the first atom to the 
        -:   64:* last 
        -:   65:* then from the second to the last 
        -:   66:* etc
        -:   67:*
        -:   68:* also check to avoid bonded and 1-3 bonded atoms
        -:   69:*/
    #####:   70:	dielectric = get_f_variable("dielec");
call    0 never executed
    #####:   71:	if( dielectric < 1.) dielectric = 1.;
branch  0 never executed
branch  1 never executed
    #####:   72:	dielectric = 332.17752/dielectric;
    #####:   73:	cutoff = get_f_variable("cutoff");
call    0 never executed
    #####:   74:	if( cutoff < 1.) cutoff = 1.e10;
branch  0 never executed
branch  1 never executed
    #####:   75:	lcutoff = -cutoff;
    #####:   76:	vtint = 0.; vtout = 0.; vtt = 0.;
    #####:   77:	for( ii=ilow; ii<=ihigh; ii++)
branch  0 never executed
branch  1 never executed
        -:   78:	{
    #####:   79:	a1 = a_m_serial(ii);
call    0 never executed
    #####:   80:	if( a1 == NULL ) goto NOTANATOM;
branch  0 never executed
branch  1 never executed
    #####:   81:	ve = 0.; va = 0.; vh = 0.;
    #####:   82:	vel = 0.; val = 0.; vhl = 0.;
    #####:   83:	a2 = a_next(-1);
call    0 never executed
        -:   84:/*	
        -:   85:*	for(i = 0; i< a1->dontuse; i++)
        -:   86:*	printf("%d ",a1->excluded[i]->serial);
        -:   87:*	printf("\n");
        -:   88:*/
        -:   89:/*
        -:   90:	while(  (a2->next != a2) && (a2->next != NULL))
        -:   91:	*/
    #####:   92:	while(   (a2->next != NULL))
branch  0 never executed
branch  1 never executed
        -:   93:	{
        -:   94:/* goto SKIP is used because this is one case where it makes sense */
        -:   95:/*	if( a2 == a1) break;  */
        -:   96:/*	if( a2 == a1) goto SKIP; */
    #####:   97:	for(i = 0; i< a1->dontuse; i++)
branch  0 never executed
branch  1 never executed
    #####:   98:		if( a2 == a1->excluded[i]) goto SKIP;
branch  0 never executed
branch  1 never executed
        -:   99:/* non - bonded are only used when the atoms arent bonded */
        -:  100:
    #####:  101:	if( lambda == 0.)
branch  0 never executed
branch  1 never executed
        -:  102:	{
    #####:  103:	xt = (a1->x - a2->x);
    #####:  104:	if( (xt > cutoff) || (xt < lcutoff) ) goto SKIP;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  105:	yt =  (a1->y - a2->y);
    #####:  106:	if( (yt > cutoff) || (yt < lcutoff) ) goto SKIP;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  107:	zt =  (a1->z - a2->z);
    #####:  108:	if( (zt > cutoff) || (zt < lcutoff) ) goto SKIP;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  109:	} else
        -:  110:	{
    #####:  111:	xt = (a1->x - a2->x +lambda*(a1->dx - a2->dx));
    #####:  112:	if( (xt > cutoff) || (xt < lcutoff) ) goto SKIP;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  113:	yt = (a1->y - a2->y +lambda*(a1->dy - a2->dy));
    #####:  114:	if( (yt > cutoff) || (yt < lcutoff) ) goto SKIP;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  115:	zt = (a1->z - a2->z +lambda*(a1->dz - a2->dz));
    #####:  116:	if( (zt > cutoff) || (zt < lcutoff) ) goto SKIP;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  117:	}
    #####:  118:	r = xt*xt+yt*yt+zt*zt;
        -:  119:/*	if( r < 1.) r = 1.;  */
        -:  120:
    #####:  121:	r0 = sqrt(r); r = r*r*r ;
        -:  122:/* debugging
        -:  123:*	printf(" %d %d %f %f %f \n", a1->serial,a2->serial,a1->q,a2->q,
        -:  124:*	332.17752*a1->q*a2->q/r0);
        -:  125:*/
    #####:  126:	ve += dielectric*a1->q*a2->q/r0; 
    #####:  127:	va -= a1->a*a2->a/r;
    #####:  128:	vh += a1->b*a2->b/r/r; 
    #####:  129:	if( a2->serial < ilow || a2->serial > ihigh)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  130:	{
    #####:  131:	vel += dielectric*a1->q*a2->q/r0; 
    #####:  132:	val -= a1->a*a2->a/r;
    #####:  133:	vhl += a1->b*a2->b/r/r; 
        -:  134:	}
        -:  135:
        -:  136:SKIP:
        -:  137:/*	if( a2->next == a1) break; */
    #####:  138:	if( a2->next == a2) break;  
branch  0 never executed
branch  1 never executed
    #####:  139:	a2 = (ATOM*) a2->next;
        -:  140:	}
        -:  141:	fprintf(op,"Vnonbon internal %s %d Eq %f E6 %f E12 %f\n",
    #####:  142:	a1->name,ii,ve-vel,va-val,vh-vhl);
        -:  143:	fprintf(op,"Vnonbon external %s %d Eq %f E6 %f E12 %f\n",a1->name
    #####:  144:		,ii,vel,val,vhl);
        -:  145:	fprintf(op,"Vnonbon total    %s %d Eq %f E6 %f E12 %f\n",a1->name
    #####:  146:		,ii,ve,va,vh);
    #####:  147:	*V += ve + va + vh;
    #####:  148:	vtint += ve -vel+ va -val + vh -vhl;
    #####:  149:	vtout += vel + val + vhl;
    #####:  150:	vtt  += ve + va + vh;
        -:  151:NOTANATOM:
    #####:  152:	i = i;
        -:  153:	}
    #####:  154:	fprintf(op," Vnonbon total internal %f \n",vtint);
    #####:  155:	fprintf(op," Vnonbon total external %f \n",vtout);
    #####:  156:	fprintf(op," Vnonbon total          %f \n",vtt);
    #####:  157:	return 1;
        -:  158:
        -:  159:}
        -:  160:
